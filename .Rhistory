trans <- as(data, 'transactions')
test_length <- round(0.1*length(trans))
test_start <- crossval_index*test_length
test_indices <- 1:test_length+test_start
train_data <- data[,-test_indices]
train_trans <- trans[-test_indices]
test_data <- data[,test_indices]
test_trans <- trans[test_indices]
#model <- CWAR(formula, trans, cwar_params, 1)
y_true <- transactions_to_labels(formula,test_trans)
return_model <- NULL
if(run_model) {
model <- run_inner_crossval(formula, train_trans, cwar_params, crossval_index)
return_model <- model
y_pred <- predict(model, test_trans)
plot(1:cwar_params$epoch,model$history$loss)
plot(1:cwar_params$epoch,model$history$accuracy)
plot(1:cwar_params$epoch,model$history$rules)
print('model results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rf) {
rf_model <- find_rf_params(formula, train_data)
y_pred <- predict(rf_model, test_data)
print('rf results')
print(confusionMatrix(y_pred,y_true))
}
if(run_cba) {
supp <- model$support
conf <- model$confidence
cba_model <- CBA(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rf_model, test_data)
print('cba results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rcar) {
supp <- model$support
conf <- model$confidence
rcar_model <- RCAR(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rcar_model, test_data)
print(confusionMatrix(y_pred,y_true))
}
return(return_model)
}
q <- run_crossval(cls~.,vote_data,cwar_params,0,F,T,F,F)
vote_data[,1]
find_rf_params <- function(formula, data) {
split_point <- round(0.9*length(data))
train_data <- data[1:split_point]
test_data <- data[split_point:length(data)]
base_mtry <- floor(sqrt(ncol(train_data)))
best_acc <- 0
best_model <- NULL
for(ntree in c(500,1000,2000)) {
for(mtry in c(floor(base_mtry/2),base_mtry,base_mtry*2)) {
model <- randomForest(formula, train_data, ntree = ntree, mtry = mtry)
y_pred <- predict(mode, test_data)
y_true <- transactions_to_labels(formula,as(test_data,'transactions'))
acc <- sum(y_true==y_pred)/length(y_true)
if(acc > best_acc) {
best_acc <- acc
best_model <- model
}
}
}
return(best_model)
}
run_crossval <- function(formula, data, cwar_params, crossval_index = 0, run_model = F, run_rf = F, run_cba = F, run_rcar = F) {
trans <- as(data, 'transactions')
test_length <- round(0.1*length(trans))
test_start <- crossval_index*test_length
test_indices <- 1:test_length+test_start
train_data <- data[-test_indices]
train_trans <- trans[-test_indices]
test_data <- data[test_indices]
test_trans <- trans[test_indices]
#model <- CWAR(formula, trans, cwar_params, 1)
y_true <- transactions_to_labels(formula,test_trans)
return_model <- NULL
if(run_model) {
model <- run_inner_crossval(formula, train_trans, cwar_params, crossval_index)
return_model <- model
y_pred <- predict(model, test_trans)
plot(1:cwar_params$epoch,model$history$loss)
plot(1:cwar_params$epoch,model$history$accuracy)
plot(1:cwar_params$epoch,model$history$rules)
print('model results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rf) {
rf_model <- find_rf_params(formula, train_data)
y_pred <- predict(rf_model, test_data)
print('rf results')
print(confusionMatrix(y_pred,y_true))
}
if(run_cba) {
supp <- model$support
conf <- model$confidence
cba_model <- CBA(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rf_model, test_data)
print('cba results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rcar) {
supp <- model$support
conf <- model$confidence
rcar_model <- RCAR(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rcar_model, test_data)
print(confusionMatrix(y_pred,y_true))
}
return(return_model)
}
vote_data[1]
vote_data[[1]]
dim(vote_data)
dim(vote_data[1])
dim(vote_data[,1])
dim(vote_data[[1]])
class(vote_data)
class(vote_data[1,])
dim(vote_data[1,])
find_rf_params <- function(formula, data) {
split_point <- round(0.9*length(data))
train_data <- data[1:split_point,]
test_data <- data[split_point:length(data),]
base_mtry <- floor(sqrt(ncol(train_data)))
best_acc <- 0
best_model <- NULL
for(ntree in c(500,1000,2000)) {
for(mtry in c(floor(base_mtry/2),base_mtry,base_mtry*2)) {
model <- randomForest(formula, train_data, ntree = ntree, mtry = mtry)
y_pred <- predict(mode, test_data)
y_true <- transactions_to_labels(formula,as(test_data,'transactions'))
acc <- sum(y_true==y_pred)/length(y_true)
if(acc > best_acc) {
best_acc <- acc
best_model <- model
}
}
}
return(best_model)
}
run_crossval <- function(formula, data, cwar_params, crossval_index = 0, run_model = F, run_rf = F, run_cba = F, run_rcar = F) {
trans <- as(data, 'transactions')
test_length <- round(0.1*length(trans))
test_start <- crossval_index*test_length
test_indices <- 1:test_length+test_start
train_data <- data[-test_indices,]
train_trans <- trans[-test_indices]
test_data <- data[test_indices,]
test_trans <- trans[test_indices]
#model <- CWAR(formula, trans, cwar_params, 1)
y_true <- transactions_to_labels(formula,test_trans)
return_model <- NULL
if(run_model) {
model <- run_inner_crossval(formula, train_trans, cwar_params, crossval_index)
return_model <- model
y_pred <- predict(model, test_trans)
plot(1:cwar_params$epoch,model$history$loss)
plot(1:cwar_params$epoch,model$history$accuracy)
plot(1:cwar_params$epoch,model$history$rules)
print('model results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rf) {
rf_model <- find_rf_params(formula, train_data)
y_pred <- predict(rf_model, test_data)
print('rf results')
print(confusionMatrix(y_pred,y_true))
}
if(run_cba) {
supp <- model$support
conf <- model$confidence
cba_model <- CBA(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rf_model, test_data)
print('cba results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rcar) {
supp <- model$support
conf <- model$confidence
rcar_model <- RCAR(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rcar_model, test_data)
print(confusionMatrix(y_pred,y_true))
}
return(return_model)
}
q <- run_crossval(cls~.,vote_data,cwar_params,0,F,T,F,F)
help(randomForest)
help("na.roughfix")
find_rf_params <- function(formula, data) {
split_point <- round(0.9*length(data))
train_data <- data[1:split_point,]
test_data <- data[split_point:length(data),]
base_mtry <- floor(sqrt(ncol(train_data)))
best_acc <- 0
best_model <- NULL
for(ntree in c(500,1000,2000)) {
for(mtry in c(floor(base_mtry/2),base_mtry,base_mtry*2)) {
model <- randomForest(formula, train_data, ntree = ntree, mtry = mtry, na.action=na.roughfix)
y_pred <- predict(mode, test_data)
y_true <- transactions_to_labels(formula,as(test_data,'transactions'))
acc <- sum(y_true==y_pred)/length(y_true)
if(acc > best_acc) {
best_acc <- acc
best_model <- model
}
}
}
return(best_model)
}
q <- run_crossval(cls~.,vote_data,cwar_params,0,F,T,F,F)
q <- randomForest(cls~.,vote_data)
q <- randomForest(cls~.,vote_data,na.action = na.omit)
predict(q,head(vote_data))
find_rf_params <- function(formula, data) {
split_point <- round(0.9*length(data))
train_data <- data[1:split_point,]
test_data <- data[split_point:length(data),]
base_mtry <- floor(sqrt(ncol(train_data)))
best_acc <- 0
best_model <- NULL
for(ntree in c(500,1000,2000)) {
for(mtry in c(floor(base_mtry/2),base_mtry,base_mtry*2)) {
model <- randomForest(formula, train_data, ntree = ntree, mtry = mtry, na.action=na.roughfix)
y_pred <- predict(model, test_data)
y_true <- transactions_to_labels(formula,as(test_data,'transactions'))
acc <- sum(y_true==y_pred)/length(y_true)
if(acc > best_acc) {
best_acc <- acc
best_model <- model
}
}
}
return(best_model)
}
q <- randomForest(cls~.,vote_data,na.action = na.omit)
q <- run_crossval(cls~.,vote_data,cwar_params,0,F,T,F,F)
find_rf_params <- function(formula, data) {
split_point <- round(0.9*length(data))
train_data <- data[1:split_point,]
test_data <- data[split_point:length(data),]
base_mtry <- floor(sqrt(ncol(train_data)))
best_acc <- 0
best_model <- NULL
for(ntree in c(500,1000,2000)) {
for(mtry in c(floor(base_mtry/2),base_mtry,base_mtry*2)) {
model <- randomForest(formula, train_data, ntree = ntree, mtry = mtry, na.action=na.roughfix)
y_pred <- predict(model, na.roughfix(test_data))
y_true <- transactions_to_labels(formula,as(test_data,'transactions'))
acc <- sum(y_true==y_pred)/length(y_true)
if(acc > best_acc) {
best_acc <- acc
best_model <- model
}
}
}
return(best_model)
}
run_crossval <- function(formula, data, cwar_params, crossval_index = 0, run_model = F, run_rf = F, run_cba = F, run_rcar = F) {
trans <- as(data, 'transactions')
test_length <- round(0.1*length(trans))
test_start <- crossval_index*test_length
test_indices <- 1:test_length+test_start
train_data <- data[-test_indices,]
train_trans <- trans[-test_indices]
test_data <- data[test_indices,]
test_trans <- trans[test_indices]
#model <- CWAR(formula, trans, cwar_params, 1)
y_true <- transactions_to_labels(formula,test_trans)
return_model <- NULL
if(run_model) {
model <- run_inner_crossval(formula, train_trans, cwar_params, crossval_index)
return_model <- model
y_pred <- predict(model, test_trans)
plot(1:cwar_params$epoch,model$history$loss)
plot(1:cwar_params$epoch,model$history$accuracy)
plot(1:cwar_params$epoch,model$history$rules)
print('model results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rf) {
rf_model <- find_rf_params(formula, train_data)
y_pred <- predict(rf_model, na.roughfix(test_data))
print('rf results')
print(confusionMatrix(y_pred,y_true))
}
if(run_cba) {
supp <- model$support
conf <- model$confidence
cba_model <- CBA(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rf_model, test_data)
print('cba results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rcar) {
supp <- model$support
conf <- model$confidence
rcar_model <- RCAR(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rcar_model, test_data)
print(confusionMatrix(y_pred,y_true))
}
return(return_model)
}
q <- randomForest(cls~.,vote_data,na.action = na.omit)
q <- run_crossval(cls~.,vote_data,cwar_params,0,F,T,F,F)
run_crossval <- function(formula, data, cwar_params, crossval_index = 0, run_model = F, run_rf = F, run_cba = F, run_rcar = F) {
trans <- as(data, 'transactions')
test_length <- round(0.1*length(trans))
test_start <- crossval_index*test_length
test_indices <- 1:test_length+test_start
train_data <- data[-test_indices,]
train_trans <- trans[-test_indices]
test_data <- data[test_indices,]
test_trans <- trans[test_indices]
#model <- CWAR(formula, trans, cwar_params, 1)
y_true <- transactions_to_labels(formula,test_trans)
return_model <- NULL
if(run_model) {
model <- run_inner_crossval(formula, train_trans, cwar_params, crossval_index)
return_model <- model
y_pred <- predict(model, test_trans)
plot(1:cwar_params$epoch,model$history$loss)
plot(1:cwar_params$epoch,model$history$accuracy)
plot(1:cwar_params$epoch,model$history$rules)
print('model results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rf) {
rf_model <- find_rf_params(formula, train_data)
y_pred <- predict(rf_model, na.roughfix(test_data))
print('rf results')
print(confusionMatrix(y_pred,y_true))
print(rf_model)
}
if(run_cba) {
supp <- model$support
conf <- model$confidence
cba_model <- CBA(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rf_model, test_data)
print('cba results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rcar) {
supp <- model$support
conf <- model$confidence
rcar_model <- RCAR(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rcar_model, test_data)
print(confusionMatrix(y_pred,y_true))
}
return(return_model)
}
q <- run_crossval(cls~.,vote_data,cwar_params,0,F,T,F,F)
q <- run_crossval(cls~.,vote_data,cwar_params,1,F,T,F,F)
q <- run_crossval(cls~.,vote_data,cwar_params,2,F,T,F,F)
q <- run_crossval(cls~.,vote_data,cwar_params,3,F,T,F,F)
q <- run_crossval(cls~.,vote_data,cwar_params,4,F,T,F,F)
q <- run_crossval(cls~.,vote_data,cwar_params,5,F,T,F,F)
q <- run_crossval(cls~.,vote_data,cwar_params,6,F,T,F,F)
q <- run_crossval(cls~.,vote_data,cwar_params,7,F,T,F,F)
q <- run_crossval(cls~.,vote_data,cwar_params,8,F,T,F,F)
q <- run_crossval(cls~.,vote_data,cwar_params,9,F,T,F,F)
run_crossval <- function(formula, data, cwar_params, crossval_index = 0, run_model = F, run_rf = F, run_cba = F, run_rcar = F) {
trans <- as(data, 'transactions')
test_length <- round(0.1*length(trans))
test_start <- crossval_index*test_length
if(test_length+test_start > length(trans)) {
test_length <- test_length - 1
}
test_indices <- 1:test_length+test_start
train_data <- data[-test_indices,]
train_trans <- trans[-test_indices]
test_data <- data[test_indices,]
test_trans <- trans[test_indices]
#model <- CWAR(formula, trans, cwar_params, 1)
y_true <- transactions_to_labels(formula,test_trans)
return_model <- NULL
if(run_model) {
model <- run_inner_crossval(formula, train_trans, cwar_params, crossval_index)
return_model <- model
y_pred <- predict(model, test_trans)
plot(1:cwar_params$epoch,model$history$loss)
plot(1:cwar_params$epoch,model$history$accuracy)
plot(1:cwar_params$epoch,model$history$rules)
print('model results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rf) {
rf_model <- find_rf_params(formula, train_data)
y_pred <- predict(rf_model, na.roughfix(test_data))
print('rf results')
print(confusionMatrix(y_pred,y_true))
print(rf_model)
}
if(run_cba) {
supp <- model$support
conf <- model$confidence
cba_model <- CBA(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rf_model, test_data)
print('cba results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rcar) {
supp <- model$support
conf <- model$confidence
rcar_model <- RCAR(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rcar_model, test_data)
print(confusionMatrix(y_pred,y_true))
}
return(return_model)
}
q <- run_crossval(cls~.,vote_data,cwar_params,9,F,T,F,F)
run_crossval <- function(formula, data, cwar_params, crossval_index = 0, run_model = F, run_rf = F, run_cba = F, run_rcar = F) {
trans <- as(data, 'transactions')
test_length <- round(0.1*length(trans))
test_start <- crossval_index*test_length
if(test_length+test_start > length(trans)) {
print(c(test_length,test_start,length(trans)))
test_length <- test_length - 1
}
test_indices <- 1:test_length+test_start
train_data <- data[-test_indices,]
train_trans <- trans[-test_indices]
test_data <- data[test_indices,]
test_trans <- trans[test_indices]
#model <- CWAR(formula, trans, cwar_params, 1)
y_true <- transactions_to_labels(formula,test_trans)
return_model <- NULL
if(run_model) {
model <- run_inner_crossval(formula, train_trans, cwar_params, crossval_index)
return_model <- model
y_pred <- predict(model, test_trans)
plot(1:cwar_params$epoch,model$history$loss)
plot(1:cwar_params$epoch,model$history$accuracy)
plot(1:cwar_params$epoch,model$history$rules)
print('model results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rf) {
rf_model <- find_rf_params(formula, train_data)
y_pred <- predict(rf_model, na.roughfix(test_data))
print('rf results')
print(confusionMatrix(y_pred,y_true))
print(rf_model)
}
if(run_cba) {
supp <- model$support
conf <- model$confidence
cba_model <- CBA(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rf_model, test_data)
print('cba results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rcar) {
supp <- model$support
conf <- model$confidence
rcar_model <- RCAR(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rcar_model, test_data)
print(confusionMatrix(y_pred,y_true))
}
return(return_model)
}
q <- run_crossval(cls~.,vote_data,cwar_params,9,F,T,F,F)
round(0.6)
floor(0.6)
run_crossval <- function(formula, data, cwar_params, crossval_index = 0, run_model = F, run_rf = F, run_cba = F, run_rcar = F) {
trans <- as(data, 'transactions')
test_length <- floor(0.1*length(trans))
test_start <- crossval_index*test_length
test_indices <- 1:test_length+test_start
train_data <- data[-test_indices,]
train_trans <- trans[-test_indices]
test_data <- data[test_indices,]
test_trans <- trans[test_indices]
#model <- CWAR(formula, trans, cwar_params, 1)
y_true <- transactions_to_labels(formula,test_trans)
return_model <- NULL
if(run_model) {
model <- run_inner_crossval(formula, train_trans, cwar_params, crossval_index)
return_model <- model
y_pred <- predict(model, test_trans)
plot(1:cwar_params$epoch,model$history$loss)
plot(1:cwar_params$epoch,model$history$accuracy)
plot(1:cwar_params$epoch,model$history$rules)
print('model results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rf) {
rf_model <- find_rf_params(formula, train_data)
y_pred <- predict(rf_model, na.roughfix(test_data))
print('rf results')
print(confusionMatrix(y_pred,y_true))
print(rf_model)
}
if(run_cba) {
supp <- model$support
conf <- model$confidence
cba_model <- CBA(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rf_model, test_data)
print('cba results')
print(confusionMatrix(y_pred,y_true))
}
if(run_rcar) {
supp <- model$support
conf <- model$confidence
rcar_model <- RCAR(formula, train_data, support = supp, confidence = conf)
y_pred <- predict(rcar_model, test_data)
print(confusionMatrix(y_pred,y_true))
}
return(return_model)
}
q <- run_crossval(cls~.,vote_data,cwar_params,9,F,T,F,F)
